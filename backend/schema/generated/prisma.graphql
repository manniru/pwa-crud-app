type AggregateIdea {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Idea {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User!
  content: String!
}

type IdeaConnection {
  pageInfo: PageInfo!
  edges: [IdeaEdge]!
  aggregate: AggregateIdea!
}

input IdeaCreateInput {
  id: ID
  author: UserCreateOneWithoutIdeasInput!
  content: String!
}

input IdeaCreateManyWithoutAuthorInput {
  create: [IdeaCreateWithoutAuthorInput!]
  connect: [IdeaWhereUniqueInput!]
}

input IdeaCreateWithoutAuthorInput {
  id: ID
  content: String!
}

type IdeaEdge {
  node: Idea!
  cursor: String!
}

enum IdeaOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  content_ASC
  content_DESC
}

type IdeaPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
}

input IdeaScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [IdeaScalarWhereInput!]
  OR: [IdeaScalarWhereInput!]
  NOT: [IdeaScalarWhereInput!]
}

type IdeaSubscriptionPayload {
  mutation: MutationType!
  node: Idea
  updatedFields: [String!]
  previousValues: IdeaPreviousValues
}

input IdeaSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IdeaWhereInput
  AND: [IdeaSubscriptionWhereInput!]
  OR: [IdeaSubscriptionWhereInput!]
  NOT: [IdeaSubscriptionWhereInput!]
}

input IdeaUpdateInput {
  author: UserUpdateOneRequiredWithoutIdeasInput
  content: String
}

input IdeaUpdateManyDataInput {
  content: String
}

input IdeaUpdateManyMutationInput {
  content: String
}

input IdeaUpdateManyWithoutAuthorInput {
  create: [IdeaCreateWithoutAuthorInput!]
  delete: [IdeaWhereUniqueInput!]
  connect: [IdeaWhereUniqueInput!]
  set: [IdeaWhereUniqueInput!]
  disconnect: [IdeaWhereUniqueInput!]
  update: [IdeaUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [IdeaUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [IdeaScalarWhereInput!]
  updateMany: [IdeaUpdateManyWithWhereNestedInput!]
}

input IdeaUpdateManyWithWhereNestedInput {
  where: IdeaScalarWhereInput!
  data: IdeaUpdateManyDataInput!
}

input IdeaUpdateWithoutAuthorDataInput {
  content: String
}

input IdeaUpdateWithWhereUniqueWithoutAuthorInput {
  where: IdeaWhereUniqueInput!
  data: IdeaUpdateWithoutAuthorDataInput!
}

input IdeaUpsertWithWhereUniqueWithoutAuthorInput {
  where: IdeaWhereUniqueInput!
  update: IdeaUpdateWithoutAuthorDataInput!
  create: IdeaCreateWithoutAuthorInput!
}

input IdeaWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  author: UserWhereInput
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [IdeaWhereInput!]
  OR: [IdeaWhereInput!]
  NOT: [IdeaWhereInput!]
}

input IdeaWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createIdea(data: IdeaCreateInput!): Idea!
  updateIdea(data: IdeaUpdateInput!, where: IdeaWhereUniqueInput!): Idea
  updateManyIdeas(data: IdeaUpdateManyMutationInput!, where: IdeaWhereInput): BatchPayload!
  upsertIdea(where: IdeaWhereUniqueInput!, create: IdeaCreateInput!, update: IdeaUpdateInput!): Idea!
  deleteIdea(where: IdeaWhereUniqueInput!): Idea
  deleteManyIdeas(where: IdeaWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  idea(where: IdeaWhereUniqueInput!): Idea
  ideas(where: IdeaWhereInput, orderBy: IdeaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Idea]!
  ideasConnection(where: IdeaWhereInput, orderBy: IdeaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IdeaConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  idea(where: IdeaSubscriptionWhereInput): IdeaSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  refreshTokenVersion: Int!
  ideas(where: IdeaWhereInput, orderBy: IdeaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Idea!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  refreshTokenVersion: Int
  ideas: IdeaCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutIdeasInput {
  create: UserCreateWithoutIdeasInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutIdeasInput {
  id: ID
  username: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  refreshTokenVersion: Int
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  refreshTokenVersion_ASC
  refreshTokenVersion_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  refreshTokenVersion: Int!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  username: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  refreshTokenVersion: Int
  ideas: IdeaUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  username: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  refreshTokenVersion: Int
}

input UserUpdateOneRequiredWithoutIdeasInput {
  create: UserCreateWithoutIdeasInput
  update: UserUpdateWithoutIdeasDataInput
  upsert: UserUpsertWithoutIdeasInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutIdeasDataInput {
  username: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  refreshTokenVersion: Int
}

input UserUpsertWithoutIdeasInput {
  update: UserUpdateWithoutIdeasDataInput!
  create: UserCreateWithoutIdeasInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_not_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  refreshTokenVersion: Int
  refreshTokenVersion_not: Int
  refreshTokenVersion_in: [Int!]
  refreshTokenVersion_not_in: [Int!]
  refreshTokenVersion_lt: Int
  refreshTokenVersion_lte: Int
  refreshTokenVersion_gt: Int
  refreshTokenVersion_gte: Int
  ideas_every: IdeaWhereInput
  ideas_some: IdeaWhereInput
  ideas_none: IdeaWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}
